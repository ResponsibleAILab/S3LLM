FQL: An Extensible Feature Query Language and Toolkit on Searching Software Characteristics for HPC Applications
The amount of large-scale scientific computing software is dramatically increasing. In this work, we Motivation and Significance
Open source scientific software projects are growing explosively. Many companies, universities, and national laboratories build their software ecosystems around the open-source software projects. There are also a lot of ongodesigned a new language, named feature query language (FQL), to collect and extract software features from a quick static code analysis. We designed and implemented an FQL toolkit to automatically detect and present the software features using an extensible query repository. Several large-scale, high performance computing (HPC) scientific codes have been used in the paper to demonstrate the HPC-related feature extraction and information collection. Although we emphasized the HPC features in the study, the toolkit can be easily extended to answer general software feature questions, such as coding pattern and hardware dependency. Keywords: Feature Query Language, Static Code Analysis, High-performance Computinging efforts to combine different software modules to create a large software system (e.g., climate modeling and simulation [1], fluid/solid dynamics co putations [2], and material science [3]).
Given a large number of open source software projects, it is critical to provide an efficient way for decision makers (such as users, customers, developers, investors, and software managers) to quickly evaluate the software and understand its structure and characteristics [4, 5]. In this paper, we target at creating a software toolkit to automatically discover open source software projects’ features. Here, “features” refer to any characteristic related to the software, including programming languages, library requirement, special hardware requirement, special tools, programming models, and so on. There are existing static analysis tools to discover meta data of open source software. For example, the open source toolkits ScanCode [6] and Fossology [7] are designed to extract the license, copyright, package dependency and other information. Oss-review-toolkit is designed to provide the dependencies of different open source libraries for a software [8]. These software does not provide a universal interface and approach to querying any feature of any open source software projects. We use open source science and engineering software on high performance computing (HPC) systems as examples to drive the design and development of our toolkit due to the science and engineering software’s large scale, high complexity, and utilization of a wide variety of computer hardware. To achieve the above goals, we need a flexible and extensible solution that can process an arbitrary number of features in any open source software and can also answer any feature-related question of interest. Our solution is based upon a new language called Feature Query Language (FQL) that lets users describe their queries in the FQL language. Given an FQL query, we then design a new software toolkit, which can parse the user input, executethe query, scan open source software, and present the results.

This research was funded by the U.S. Department of Energy, Office of
Science, Advanced Scientific Computing Research (Interoperable Design of
Extreme-scale Application Software).
References
[1] D. Bader, W. Collins, R. Jacob, P. Jones, P. Rasch, M. Taylor, P. Thornton,
D. Williams, Accelerated climate modeling for energy (ACME) project strategy and
initial implementation plan (2014).
[2] R. M. Maxwell, S. J. Kollet, S. G. Smith, C. S. Woodward, R. D. Falgout, I. M.
Ferguson, C. Baldwin, W. J. Bosl, R. Hornung, S. Ashby, ParFlow users manual,
International Ground Water Modeling Center Report GWMI 1 (2009) (2009) 129.
[3] J. Kim, K. Esler, J. McMinis, B. Clark, J. Gergely, S. Chiesa, K. Delaney, J. Vincent,
D. Ceperley, QMCPACK simulation suite (2014).
[4] D. Wang, W. Zheng, F. Song, Application Software Analytics Toolkit for Facilitating the Understanding, Componentization, and Refactoring of Large-Scale Scientific
Models, Tech. rep., Oak Ridge National Lab.(ORNL), Oak Ridge, TN (United States)
(2018).
6
[5] P. Klint, T. Van Der Storm, J. Vinju, Rascal: A domain specific language for source
code analysis and manipulation, in: Ninth IEEE International Working Conference on
Source Code Analysis and Manipulation, 2009. SCAM’09., IEEE, 2009, pp. 168–177.
[6] scancode-toolkit, https://github.com/nexB/scancode-toolkit (2016).
[7] R. Gobeille, The fossology project, in: Proceedings of the 2008 international working
conference on Mining software repositories, ACM, 2008, pp. 47–50.
[8] oss-review-toolkit, https://github.com/heremaps/oss-review-toolkit (2017).
[9] L. Dagum, R. Menon, OpenMP: an industry standard API for shared-memory programming, IEEE computational science and engineering 5 (1) (1998) 46–55.
